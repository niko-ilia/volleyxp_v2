const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:5001';
const ADMIN_EMAIL = process.env.ADMIN_EMAIL || 'test13@test13.com';
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'test13';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
async function getAuthToken() {
  try {
    const response = await axios.post(`${API_BASE_URL}/api/auth/login`, {
      email: ADMIN_EMAIL,
      password: ADMIN_PASSWORD
    });
    return response.data.token;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.response?.data || error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –≤ –º–∞—Ç—á
async function addPlayerToMatch(matchId, playerEmail) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const token = await getAuthToken();
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
    const matchResponse = await axios.get(`${API_BASE_URL}/api/matches/${matchId}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    const match = matchResponse.data;
    console.log(`üìã –ú–∞—Ç—á: ${match.title}`);
    console.log(`üë• –¢–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${match.participants.length}/${match.maxParticipants}`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userResponse = await axios.get(`${API_BASE_URL}/api/users/email/${playerEmail}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    const user = userResponse.data;
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${user.email})`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const isAlreadyJoined = match.participants.some(p => p._id === user._id);
    if (isAlreadyJoined) {
      console.log('‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –º–∞—Ç—á–µ');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ
    if (match.participants.length >= match.maxParticipants) {
      console.log('‚ùå –ú–∞—Ç—á –∑–∞–ø–æ–ª–Ω–µ–Ω, –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç');
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Ç—á
    const joinResponse = await axios.post(`${API_BASE_URL}/api/matches/${matchId}/add-player`, {
      playerEmail: playerEmail
    }, {
      headers: { Authorization: `Bearer ${token}` }
    });

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞—Ç—á');
    console.log(`üë• –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${joinResponse.data.participants.length}/${match.maxParticipants}`);

    // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    console.log('\nüìã –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–∞—Ç—á–∞:');
    joinResponse.data.participants.forEach((participant, index) => {
      console.log(`${index + 1}. ${participant.name} (${participant.email}) - —Ä–µ–π—Ç–∏–Ω–≥: ${participant.rating}`);
    });

  } catch (error) {
    if (error.response?.status === 404) {
      console.error('‚ùå –ú–∞—Ç—á –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    } else if (error.response?.status === 400) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.response.data.message || error.response.data.code);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length !== 2) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node addPlayerToMatch.js <matchId> <playerEmail>');
    console.log('–ü—Ä–∏–º–µ—Ä: node addPlayerToMatch.js 68810fb2f2e11d16c6f0fa31 test@example.com');
    process.exit(1);
  }

  const [matchId, playerEmail] = args;
  
  console.log(`üéØ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ${playerEmail} –≤ –º–∞—Ç—á ${matchId}`);
  console.log('‚îÄ'.repeat(50));
  
  await addPlayerToMatch(matchId, playerEmail);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { addPlayerToMatch, getAuthToken }; 