const mongoose = require('mongoose');
require('dotenv').config();

const Court = require('../models/Court');
const User = require('../models/User');

async function createTestCourts() {
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ');

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é court_manager –∏–ª–∏ super_admin
    const managers = await User.find({
      role: { $in: ['court_manager', 'court_admin', 'super_admin'] }
    }).select('_id name email role');

    if (managers.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é court_manager, court_admin –∏–ª–∏ super_admin');
      console.log('–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª—å—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç makeSuperAdmin.js');
      return;
    }

    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${managers.length} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:`);
    managers.forEach(manager => {
      console.log(`   - ${manager.name} (${manager.email}) - ${manager.role}`);
    });

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ—Ä—Ç—ã
    const testCourts = [
      {
        name: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å "–í–æ–ª–µ–π–±–æ–ª"',
        description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–æ—Ä—Ç–∞–º–∏ –¥–ª—è –≤–æ–ª–µ–π–±–æ–ª–∞',
        address: '—É–ª. –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è, 15, –ú–æ—Å–∫–≤–∞',
        coordinates: [37.5665, 55.7558], // –ú–æ—Å–∫–≤–∞
        status: 'active',
        isPaid: true,
        price: 1500,
        managerId: managers[0]._id,
        amenities: ['parking', 'shower', 'equipment', 'cafe'],
        workingHours: {
          monday: { open: '09:00', close: '22:00' },
          tuesday: { open: '09:00', close: '22:00' },
          wednesday: { open: '09:00', close: '22:00' },
          thursday: { open: '09:00', close: '22:00' },
          friday: { open: '09:00', close: '22:00' },
          saturday: { open: '10:00', close: '20:00' },
          sunday: { open: '10:00', close: '20:00' }
        }
      },
      {
        name: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ä—Ç "–ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã"',
        description: '–û—Ç–∫—Ä—ã—Ç—ã–π –∫–æ—Ä—Ç –≤ –ø–∞—Ä–∫–µ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä',
        address: '–ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã, –ú–æ—Å–∫–≤–∞',
        coordinates: [37.5153, 55.7308], // –ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã
        status: 'active',
        isPaid: false,
        managerId: managers.length > 1 ? managers[1]._id : managers[0]._id,
        amenities: ['parking'],
        workingHours: {
          monday: { open: '08:00', close: '23:00' },
          tuesday: { open: '08:00', close: '23:00' },
          wednesday: { open: '08:00', close: '23:00' },
          thursday: { open: '08:00', close: '23:00' },
          friday: { open: '08:00', close: '23:00' },
          saturday: { open: '08:00', close: '23:00' },
          sunday: { open: '08:00', close: '23:00' }
        }
      },
      {
        name: '–°–ø–æ—Ä—Ç–∑–∞–ª "–ê—Ç–ª–µ—Ç"',
        description: '–ö—Ä—ã—Ç—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º',
        address: '—É–ª. –ê—Ç–ª–µ—Ç–∏—á–µ—Å–∫–∞—è, 8, –ú–æ—Å–∫–≤–∞',
        coordinates: [37.5800, 55.7500], // –ú–æ—Å–∫–≤–∞
        status: 'active',
        isPaid: true,
        price: 2000,
        managerId: managers[0]._id,
        amenities: ['parking', 'shower', 'equipment', 'locker'],
        workingHours: {
          monday: { open: '07:00', close: '23:00' },
          tuesday: { open: '07:00', close: '23:00' },
          wednesday: { open: '07:00', close: '23:00' },
          thursday: { open: '07:00', close: '23:00' },
          friday: { open: '07:00', close: '23:00' },
          saturday: { open: '08:00', close: '22:00' },
          sunday: { open: '08:00', close: '22:00' }
        }
      },
      {
        name: '–ö–æ—Ä—Ç –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ "–†–µ–º–æ–Ω—Ç"',
        description: '–ö–æ—Ä—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
        address: '—É–ª. –†–µ–º–æ–Ω—Ç–Ω–∞—è, 5, –ú–æ—Å–∫–≤–∞',
        coordinates: [37.5900, 55.7600], // –ú–æ—Å–∫–≤–∞
        status: 'maintenance',
        isPaid: false,
        managerId: managers[0]._id,
        amenities: [],
        workingHours: {
          monday: { open: '', close: '' },
          tuesday: { open: '', close: '' },
          wednesday: { open: '', close: '' },
          thursday: { open: '', close: '' },
          friday: { open: '', close: '' },
          saturday: { open: '', close: '' },
          sunday: { open: '', close: '' }
        }
      }
    ];

    console.log('\nüèüÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤...');

    const createdCourts = [];
    const existingCourts = [];

    for (const courtData of testCourts) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ—Ä—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
      const existingCourt = await Court.findOne({ 
        name: courtData.name,
        isDeleted: false 
      });

      if (existingCourt) {
        existingCourts.push(existingCourt);
        console.log(`   ‚ö†Ô∏è –ö–æ—Ä—Ç "${courtData.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      } else {
        const court = new Court(courtData);
        await court.save();
        createdCourts.push(court);
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ—Ä—Ç "${courtData.name}"`);
      }
    }

    console.log(`\nüéØ –ò—Ç–æ–≥:`);
    console.log(`   –°–æ–∑–¥–∞–Ω–æ –∫–æ—Ä—Ç–æ–≤: ${createdCourts.length}`);
    console.log(`   –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: ${existingCourts.length}`);
    console.log(`   –í—Å–µ–≥–æ –∫–æ—Ä—Ç–æ–≤: ${createdCourts.length + existingCourts.length}`);

    if (createdCourts.length > 0) {
      console.log(`\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ç—ã:`);
      createdCourts.forEach(court => {
        console.log(`   - ${court.name} (${court.isPaid ? '–ü–ª–∞—Ç–Ω—ã–π' : '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π'}) - ${court.status}`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  createTestCourts();
}

module.exports = createTestCourts; 