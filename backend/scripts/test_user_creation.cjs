const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

async function testUserCreation() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb+srv://marswonder:dM1savncfQjtSZPY@cluster0.rjtkykh.mongodb.net/volley-match?retryWrites=true&w=majority&appName=Cluster0');
    
    const User = require('../models/User');
    
    console.log('üîß –¢–µ–∫—É—â–∏–π NODE_ENV:', process.env.NODE_ENV);
    
    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ NODE_ENV (–ø—Ä–æ–¥–∞–∫—à–Ω)
    console.log('\nüìã –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ');
    const hashedPassword = await bcrypt.hash('password123', 10);
    
    const prodUser = new User({
      email: 'test-prod@example.com',
      name: 'Test Prod User',
      password: hashedPassword,
      emailConfirmed: false,
      isTestUser: process.env.NODE_ENV === 'test'
    });
    
    await prodUser.save();
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ:');
    console.log('  Email:', prodUser.email);
    console.log('  isTestUser:', prodUser.isTestUser);
    
    // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å NODE_ENV=test
    console.log('\nüìã –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
    process.env.NODE_ENV = 'test';
    
    const testUser = new User({
      email: 'test-test@example.com',
      name: 'Test Test User',
      password: hashedPassword,
      emailConfirmed: false,
      isTestUser: process.env.NODE_ENV === 'test'
    });
    
    await testUser.save();
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ:');
    console.log('  Email:', testUser.email);
    console.log('  isTestUser:', testUser.isTestUser);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüìä –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ:');
    const allUsers = await User.find({}, {email: 1, isTestUser: 1, name: 1});
    allUsers.forEach(user => {
      console.log(`  - ${user.email} (${user.name}): isTestUser = ${user.isTestUser}`);
    });
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const deleteResult = await User.deleteMany({isTestUser: true});
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleteResult.deletedCount} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    await mongoose.connection.close();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

testUserCreation(); 