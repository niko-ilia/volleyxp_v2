const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');

async function updateUserIdsInMatches() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb+srv://marswonder:dM1savncfQjtSZPY@cluster0.rjtkykh.mongodb.net/volley-match?retryWrites=true&w=majority&appName=Cluster0');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ID
    const exportPath = path.join(__dirname, '../../users-export-2025-07-28.json');
    const exportData = JSON.parse(fs.readFileSync(exportPath, 'utf8'));
    
    console.log(`üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${exportData.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞`);
    
    let matchesUpdated = 0;
    let resultsUpdated = 0;
    
    for (const userData of exportData) {
      try {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –ø–æ email
        const user = await mongoose.connection.db.collection('users').findOne({ email: userData.email });
        if (!user) {
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${userData.email} - –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`);
          continue;
        }
        
        const oldId = userData.id; // ID –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞
        const newId = user._id.toString(); // –¢–µ–∫—É—â–∏–π ID –≤ –±–∞–∑–µ
        
        if (oldId === newId) {
          console.log(`‚úÖ ${userData.email} - ID —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π`);
          continue;
        }
        
        console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º ${userData.email}: ${oldId} ‚Üí ${newId}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á–∏
        const matchResult = await mongoose.connection.db.collection('matches').updateMany(
          { participants: new mongoose.Types.ObjectId(oldId) },
          { $set: { 'participants.$': new mongoose.Types.ObjectId(newId) } }
        );
        
        if (matchResult.modifiedCount > 0) {
          console.log(`  üìä –ú–∞—Ç—á–∏: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${matchResult.modifiedCount}`);
          matchesUpdated += matchResult.modifiedCount;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (team1)
        const result1Result = await mongoose.connection.db.collection('results').updateMany(
          { 'games.team1': new mongoose.Types.ObjectId(oldId) },
          { $set: { 'games.$[].team1.$': new mongoose.Types.ObjectId(newId) } }
        );
        
        if (result1Result.modifiedCount > 0) {
          console.log(`  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã team1: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${result1Result.modifiedCount}`);
          resultsUpdated += result1Result.modifiedCount;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (team2)
        const result2Result = await mongoose.connection.db.collection('results').updateMany(
          { 'games.team2': new mongoose.Types.ObjectId(oldId) },
          { $set: { 'games.$[].team2.$': new mongoose.Types.ObjectId(newId) } }
        );
        
        if (result2Result.modifiedCount > 0) {
          console.log(`  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã team2: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${result2Result.modifiedCount}`);
          resultsUpdated += result2Result.modifiedCount;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º confirmedBy
        const confirmedResult = await mongoose.connection.db.collection('results').updateMany(
          { confirmedBy: new mongoose.Types.ObjectId(oldId) },
          { $set: { confirmedBy: new mongoose.Types.ObjectId(newId) } }
        );
        
        if (confirmedResult.modifiedCount > 0) {
          console.log(`  üìä –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${confirmedResult.modifiedCount}`);
          resultsUpdated += confirmedResult.modifiedCount;
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${userData.email}:`, error.message);
      }
    }
    
    console.log('\nüìä –ò—Ç–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
    console.log(`‚úÖ –ú–∞—Ç—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${matchesUpdated}`);
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${resultsUpdated}`);
    
    await mongoose.connection.close();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

updateUserIdsInMatches(); 